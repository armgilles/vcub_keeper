[get_distance_prompt]
# Description du tool
prompt_descrption = """Calculer la distance entre deux stations (en km) grâce à leurs coordonnées (lat, lon).

IMPORTANT: Les paramètres doivent être fournis en gardant leurs précisions: 

Exemple d'utilisation:
1. Chercher les coordonnées de la station "Stalingrad":
   df[df['station_name'] == 'STALINGRAD']
2. Chercher les coordonnées de la station "Porte de Bourgogne":
   df[df['station_name'] == 'PORTE DE BOURGOGNE']
3. Utiliser get_distance(lat1,lon1,lat2,lon2) avec les valeurs numériques obtenues:
   distance = get_distance(lat1=44.8378,lon1=-0.5792,lat2=44.8407,lon2=-0.5811)

Cela renvoie la distance en kilomètres entre les deux stations.
"""

[get_geocoding_prompt]
prompt_descrption = """Récupérer la latitude et la longitude d'une adresse postale en France.
Exemple d'utilisation: lat, lon = get_geocoding("1 rue de la République, Bordeaux").
"""

[find_nearest_stations_prompt]
prompt_descrption = """Trouve les X stations les plus proches d'une coordonnée GPS. 
IMPORTANT: Les paramètres doivent être fournis comme des arguments séparés et typés correctement: 
lat (float), lon (float), nombre_station_proche (int, optionnel).
Exemple pour avoir les 2 stations les plus proche d'une latitude (ex: 44.0485) et d'une longitude (ex: -0.5785) qui sont des float:
nearest_stations_json = find_nearest_stations(last_info_station=df,
                                            lat=44.0485, lon=-0.5785, nombre_station_proche=2)
Cela renvoie un json avec les 2 stations les plus proches avec une colonne "distance" en km
ainsi que les informations liées à la station : 
[{'station_id': 103,
  'date': Timestamp('2025-03-05 15:40:00'),
  'available_stands': 10,
  'available_bikes': 22,
  'status': 1,
  'anomaly': 1.0,
  'station_name': 'Place du Palais',
  'commune_name': 'Bordeaux',
  'lat': 44.837799072265625,
  'lon': -0.5702999830245972,
  'distance': 0.0672468849653659},
 {'station_id': 42,
  'date': Timestamp('2025-03-05 15:40:00'),
  'available_stands': 15,
  'available_bikes': 0,
  'status': 1,
  'anomaly': 1.0,
  'station_name': 'Camille Jullian',
  'commune_name': 'Bordeaux',
  'lat': 44.83919906616211,
  'lon': -0.5720000267028809,
  'distance': 0.15456434694289684}]
"""

[get_prediction_station_prompt]
prompt_descrption = """Permet de faire une prédiction sur une station donnée à partir des données historiques disponibles.
Les paramètres requis sont : 'target_station_id' (ID de la station à prédire),
'target_col' (Colonne cible à prédire, par exemple 'available_bike_stands' ou 'available_bikes' UNIQUEMENT),
et 'horizon_prediction' (Horizon de prédiction par période de 10 minutes par exemple '20m', '2h', '4h', '1d' etc.).
Pour le calcul de l'horizon, il faut la date actuelle (présent dans last_info_station) et interpréter la demande de l'utilisateur
pour calculer l'horizon de prédiction.
On ne peut pas faire de prédiction sur une période supérieure à 24h ou 1 jours maximum !

Exemple d'utilisation: L'utilsateur souhaiterait prédire le nombre de vélos disponibles à la station Berges du Lac dans 2 heures.
Il faut donc trouver l'id de la station Berges du Lac dans le dataframe last_info_station ainsi que la date actuelle.
Ensuite exécuter la fonction get_prediction_station avec les paramètres comme ci-dessous:
params = {"target_station_id": 175, "target_col": "available_bike_stands","horizon_prediction": "30m", "return_df": True}
prediction = get_prediction_station(params)
La fonction renvoie un DataFrame Polars, la valeur prédite est la colonne "y_pred" et il y a la colonne "date" qui peut être utile 
pour l'utilisateur pour savoir à quel moment la prédiction a été faite (date + horizon de prédiction).
Si uniquement besoin de la prédiction alors tu mettre la clef "return_df" à False, cela renvera uniquement la valeur prédite (int).
"""

# La fonction renvoie un json avec la date de la prédiction et la valeur prédite.
